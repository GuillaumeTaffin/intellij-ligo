{
  parserClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.parser.JsLigoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="JsLigo"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.intellij.ligo.language.jsligo.psi"
  psiImplPackage="com.github.guillaumetaffin.intellij.ligo.language.jsligo.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.psi.JsLigoTypes"
  elementTypeClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.psi.JsLigoElementType"
  tokenTypeClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.psi.JsLigoTokenType"

}

source_file ::= (<<repeat_seperated_by top_level semicolon?>> semicolon?)?

private top_level ::=
    top_level_binding
    | type_alias_declaration
    | comment

private comment ::= line_comment

line_comment ::= LINE_COMMENT_START COMMENT_TEXT?

type_alias_declaration ::= TYPE_ALIAS_KW IDENTIFIER EQ IDENTIFIER (type_argument_list)?

type_argument_list ::= LT <<repeat_seperated_by IDENTIFIER COMMA>> GT

top_level_binding ::=
    (CONST_KW|LET_KW)
    IDENTIFIER
    (COLON IDENTIFIER)?
    EQ
    expression

expression ::= literal_value (AS_KW IDENTIFIER)?

private literal_value ::= STRING_LITERAL
    | number_literal

number_literal ::= ZERO_NUMBER | NON_ZERO_NUMBER

private left semicolon ::= SEMICOLON

private meta repeat_seperated_by ::= (<<rule>> (<<separator>> <<rule>>)*)