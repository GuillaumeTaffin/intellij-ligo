{
  parserClass="com.github.guillaumetaffin.intellij.ligo.language.parser.LigoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Ligo"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.intellij.ligo.language.parser.psi"
  psiImplPackage="com.github.guillaumetaffin.intellij.ligo.language.parser.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.intellij.ligo.language.parser.psi.LigoTypes"
  elementTypeClass="com.github.guillaumetaffin.intellij.ligo.language.parser.psi.LigoElementType"
  tokenTypeClass="com.github.guillaumetaffin.intellij.ligo.language.parser.psi.LigoTokenType"

  tokens=[
    CONST="const"
    LET="let"
    SEMICOLON=";"
    COLON=":"
    EQ="="
    NEW_LINE="regexp:[\n\r]+"
    ID="regexp:@?[a-zA-Z][a-zA-Z_0-9]*"
    INT_LITERAL="regexp:[0-9][0-9_]*"
    STRING_LITERAL='regexp:\"([^\"\r\n]|(\\\"))*\"'
    WHITE_SPACE="regexp:[^\S\n\r]+"
  ]
}

ligoFile ::= ((binding top_level_separator) +)?

private top_level_separator ::= statement_separator | <<eof>>

statement_separator ::= NEW_LINE? ";" NEW_LINE? | NEW_LINE {name="; or new line"}

private binding ::= const_binding | let_binding

const_binding ::= "const" ID (":" type_ref_expr)? "=" binding_rhs

let_binding ::= "let" ID (":" type_ref_expr)? "=" binding_rhs

type_ref_expr ::= ID

binding_rhs ::= literal_expr

literal_expr ::= INT_LITERAL | STRING_LITERAL

