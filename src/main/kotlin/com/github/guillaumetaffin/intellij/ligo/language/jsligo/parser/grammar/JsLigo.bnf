{
  parserClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.parser.JsLigoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="JsLigo"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.guillaumetaffin.intellij.ligo.language.jsligo.parser.psi"
  psiImplPackage="com.github.guillaumetaffin.intellij.ligo.language.jsligo.parser.psi.impl"

  elementTypeHolderClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.parser.psi.JsLigoTypes"
  elementTypeClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.parser.psi.JsLigoElementType"
  tokenTypeClass="com.github.guillaumetaffin.intellij.ligo.language.jsligo.lexer.JsLigoTokenType"

  parserImports=[
    "static com.github.guillaumetaffin.intellij.ligo.language.jsligo.lexer.Tokens.*"
  ]

  generateTokens=false

  extends(".*type_ref")=type_ref
  extends(".*value_expr")=value_expr

  tokens=[
    CONST="const"
    LET="let"
    SEMICOLON=";"
    COLON=":"
    EQ="="
    LEFT_ANGLE_BRACKET="<"
    RIGHT_ANGLE_BRACKET=">"
    COMMA=","
    OPEN_PAREN="("
    CLOSE_PAREN=")"
    OPEN_BRACKET="["
    CLOSE_BRACKET="]"
    OPEN_BRACE="{"
    CLOSE_BRACE="}"
    DOT="."
    AS="as"
    PLUS="+"
    MINUS="-"
    MUL="*"
    DIV="/"
    MODULO="%"
    BANG="!"
    TRUE="true"
    FALSE="false"
    AND="&&"
    PIPE="|"
    SPREAD="..."
    AT="@"
    TYPE="type"
    RETURN="return"
    NAMESPACE_KW="namespace"
    ID="regexp:_?([a-zA-Z][a-zA-Z_0-9]*)?"
    INT_LITERAL="regexp:[0-9][0-9_]*"
    STRING_LITERAL='regexp:\"([^\"\r\n]|(\\\"))*\"'
    LINE_COMMENT="regexp://.*"
    BLOCK_COMMENT="regexp:/\*[\s\S]*?\*/"
    WHITE_SPACE="regexp:\s+"
  ]
}

ligoFile ::= ((top_level_statement top_level_separator?) +)?

top_level_separator ::= statement_separator | <<eof>>

private left statement_separator ::= ";"{name=";"}

private top_level_statement ::= namespace | binding

namespace ::= "namespace" ID "{" (top_level_statement statement_separator?)* "}"

private binding ::= const_binding | let_binding | type_alias

type_alias ::= "type" ID "=" type_ref;

const_binding ::= annotation_list "const" def_var_id (":" type_ref)? "=" binding_rhs

let_binding ::= annotation_list "let" def_var_id (":" type_ref)? "=" binding_rhs

annotation_list ::= annotation*

annotation ::= "@" ID

type_ref ::=
    simple_type_ref
    | tuple_type_ref
    | record_type_ref
    | func_type_ref
    | variant_type_ref
    | INT_LITERAL

simple_type_ref ::= ID type_generics?

tuple_type_ref ::= "[" type_ref (COMMA type_ref)* "]"

record_type_ref ::= "{" record_field_type (COMMA record_field_type)* "}"

variant_type_ref ::= variant_type_item ("|" variant_type_item)*
variant_type_item ::= "[" STRING_LITERAL ("," type_ref)* "]"

func_type_ref ::= func_def_arg_list arrow type_ref

record_field_type ::= ID ":" type_ref

type_generics ::= (LEFT_ANGLE_BRACKET type_ref (COMMA type_ref)* RIGHT_ANGLE_BRACKET)

binding_rhs ::= value_expr

value_expr ::=
    func_def_value_expr
    | unary_value_exp_group
    | composed_value_expr_group
    | primary_value_expr_group

private unary_value_exp_group ::=
    unary_minus_value_expr
    | unary_not_value_expr

private composed_value_expr_group ::=
    type_qualified_value_expr
    | math_value_expr
    | comparison_value_expr
    | boolean_value_expr

private primary_value_expr_group ::=
    nested_ref_call_value_expr
    | parens_value_expr
    | tuple_value_expr
    | record_value_expr
    | var_ref_value_expr
    | literal_value_expr

func_def_value_expr ::= func_def_value_expr_signature arrow (func_body | value_expr)

func_body ::= "{" (func_body_statement statement_separator?)+ "}"

private func_body_statement ::= binding | return_statement

return_statement ::="return" value_expr

func_def_value_expr_signature ::= ID | func_def_arg_list (":" type_ref)?

func_def_arg_list ::= "(" (func_def_arg (COMMA func_def_arg)*)? ")"

func_def_arg ::= def_var_id (":" type_ref)?

def_var_id ::= ID | destruct_tuple_ids | destruct_record_ids

destruct_tuple_ids ::= "[" def_var_id (COMMA def_var_id)* "]"

destruct_record_ids ::= "{" destruct_record_field (COMMA destruct_record_field)* "}"

destruct_record_field ::= record_field_name (":" record_field_alias)?
record_field_name ::= ID
record_field_alias ::= ID

nested_ref_call_value_expr ::= nested_ref func_call_args?

func_call_args ::= "(" (value_expr ("," value_expr)*)? ")"

tuple_value_expr ::= "[" (tuple_content_item ("," tuple_content_item)*)? "]"
private tuple_content_item ::= value_expr | var_spreading_ref_expr

record_value_expr ::= "{" record_content_item ("," record_content_item) "}"
private record_content_item ::= record_value_field_def | var_spreading_ref_expr
record_value_field_def ::= record_field_name ":" value_expr

literal_value_expr ::= INT_LITERAL | STRING_LITERAL | "true" | "false"

var_ref_value_expr ::= ID

var_spreading_ref_expr ::= "..." var_ref_value_expr

parens_value_expr ::= "(" value_expr ")"

nested_ref ::= (ref_id ".")* ref_id

ref_id ::= ID

type_qualified_value_expr ::= primary_value_expr_group "as" type_ref

math_value_expr ::= primary_value_expr_group (math_operator primary_value_expr_group) +

comparison_value_expr ::= primary_value_expr_group comparison_operator primary_value_expr_group

boolean_value_expr ::= primary_value_expr_group boolean_operator primary_value_expr_group

unary_minus_value_expr ::= "-" value_expr

unary_not_value_expr ::= "!" value_expr

math_operator ::= "+" | "-" | "*" | "/" | "%"

comparison_operator ::= "<" | "<""=" | "=""=" | ">""=" | ">"

boolean_operator ::= "&&" | "|""|" | "=""=" | "!""="

arrow ::= "="">"


